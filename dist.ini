name    = List-Compare-Lite
author  = Peter Hallam <pragmatic@cpan.org>
license = Perl_5
copyright_holder = Peter Hallam
copyright_year   = 2012

[Git::NextVersion]
first_version = 0.01

[GatherDir]
; exclude_filename = README.pod

[PruneCruft]
[ManifestSkip]

[OurPkgVersion]
; [InsertCopyright]   ; add copyright at "# COPYRIGHT"
[PodWeaver]

[License]
[ReadmeAnyFromPod / ReadmeTextInBuild]
[ReadmeAnyFromPod / ReadmeMarkdownInRoot]

[Test::Compile]
fake_home = 1

; xt tests
[Test::PodSpelling]     ; xt/author/pod-spell.t
[Test::Perl::Critic]    ; xt/author/critic.t
; [MetaTests]             ; xt/release/meta-yaml.t
[PodSyntaxTests]        ; xt/release/pod-syntax.t
[PodCoverageTests]      ; xt/release/pod-coverage.t
; [PortabilityTests]      ; xt/release/portability.t (of file name)
; [Test::Version]         ; xt/release/test-version.t

[AutoPrereqs]

[@GitHub]
[GitHub::Meta]
; remote = origin

[MetaNoIndex]
directory = t
directory = xt
directory = examples

[Bugtracker]

[MetaProvides::Package]
meta_noindex = 1

[MetaYAML]
[MetaJSON]

[ExecDir]
[ShareDir]
[MakeMaker]

[Manifest]

[Git::Check]                        ; ensure all files checked in
allow_dirty = Changes
allow_dirty = dist.ini
allow_dirty = README.mkdn

[CheckChangesHasContent]            ; ensure Changes has been updated
[CheckExtraTests]                   ; ensure xt/ tests pass
[TestRelease]                       ; ensure t/ tests pass
[ConfirmRelease]                    ; prompt before uploading

; releaser
; [UploadToCPAN]              ; uploads to CPAN
[FakeRelease]

; after release
[Git::Commit / Commit_Dirty_Files]  ; commit Changes (as released)
allow_dirty = Changes
allow_dirty = dist.ini
allow_dirty = README.mkdn
[Git::Tag]                          ; tag repo with custom tag

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]
format = %-5v %{yyyy-MM-dd}d

; [Git::Commit / Commit_Changes]      ; commit Changes (for new dev)
; allow_dirty = Changes
; allow_dirty = dist.ini
; allow_dirty = README.mkdn
; add_files_in = Changes
; add_files_in = dist.ini
; add_files_in = README.mkdn
[Git::Push]                         ; push repo to remote
push_to = origin

[Git::Remote::Check]
branch = master
remote_name = origin
remote_branch = master
